{
  "t-includes": {
    "prefix": "t-includes",
    "body": [
      "#include <stdlib.h>",
      "#include <stdio.h>",
      "#include <string.h>",
      "#include <unistd.h>",
      "#include <fcntl.h>",
      "#include <sys/wait.h>",
      "#include <sys/stat.h>",
      "#include <ctype.h>",
      "#include <signal.h>",
      "#include <stdbool.h>",
      "#include <sys/types.h>",
      "",
      "$0"
    ]
  },
  "t-main": {
    "prefix": "t-main",
    "body": [
      "int main(int argc, char** argv)",
      "{",
      "\t$0",
      "\t",
      "\texit(0);",
      "}"
    ]
  },
  "t-comment": {
    "prefix": "t-comment",
    "body": [
      "/* $1 */",
      "$0"
    ]
  },
  "t-variables: local variables": {
    "prefix": "t-variables: local variables",
    "body": [
      "/* ------------- Variabili locali ------------- */",
      "",
      "int pid;\t\t\t\t/* process identifier per le fork() */",
      "int ${1:N};\t\t\t\t\t/* numero di file passati sulla riga di comando */",
      "int $2;\t\t\t\t\t/* indici per i cicli */",
      "$3",
      "int status;\t\t\t\t/* variabile di stato per la wait */",
      "int ritorno;\t\t\t/* variabile usata dal padre per recuperare valore di ritorno di ogni figlio */",
      "",
      "/* -------------------------------------------- */",
      "",
      "$0"
    ]
  },
  "t-control: parameters": {
    "prefix": "t-control: parameters",
    "body": [
      "/* Controllo se il numero di parametri passati da linea di comando Ã¨ corretto */",
      "if (argc ${1:<} ${2:n})",
      "{",
      "\tprintf(\"Numero di parametri errato: argc = %d, ma dovrebbe essere >= ${2:n}\\n\", argc);",
      "\texit(1);",
      "}",
      "",
      "/* Numero di parametri passati da linea di comando */",
      "${3:N} = argc - 1;",
      "",
      "$0"
    ]
  },
  "t-pipe: typedef pipe_t": {
    "prefix": "t-pipe: pipe_t",
    "body": [
      "typedef int pipe_t[2];         /* definizione del TIPO pipe_t come array di 2 interi */",
      "",
      "$0"
    ]
  },
  "t-pipe: single piping": {
    "prefix": "t-pipe: single piping",
    "body": [
      "/* Creo una pipe per consentire la comunicazione tra ${1:padre} e ${2:figlio} */",
      "if (pipe(${3:piped}) < 0)",
      "{",
      "\t/* La creazione della pipe ha fallito, stampo un messaggio d'errore ed esco specificando un valore intero d'errore */",
      "\tprintf(\"Errore nel piping.\\n\");",
      "\texit($4);",
      "}",
      "",
      "$0"
    ]
  },
  "t-pipe: multiple piping (dynamic array)": {
    "prefix": "t-pipe: multiple piping (dynamic)",
    "body": [
      "/* Creo un vettore di pipe */",
      "${1:piped} = (pipe_t*)malloc(${2:N} * sizeof(pipe_t));",
      "if (${1:piped} == NULL)",
      "{",
      "\tprintf(\"Errore nell'allocazione della memoria per la pipe ${3:padre}-${4:figli}\\n\");",
      "\texit($6);",
      "}",
      "",
      "/* Creo le pipe per consentire la comunicazione tra ${3:padre} e ${4:figli} */",
      "for (${5:i} = 0; ${5:i} < ${2:N}; ${5:i}++)",
      "{",
      "\t/* Creazione della pipe */",
      "\tif (pipe(${1:piped}[${5:i}]) < 0)",
      "\t{",
      "\t\t/* La creazione della pipe ha fallito, stampo un messaggio d'errore ed esco specificando un valore intero d'errore */",
      "\t\tprintf(\"Errore nel piping.\\n\");",
      "\t\texit($7);",
      "\t}",
      "}",
      "",
      "$0"
    ]
  },
  "t-pipe: multiple piping (static array)": {
    "prefix": "t-pipe: multiple piping (static)",
    "body": [
      "/* Creo le pipe per consentire la comunicazione tra ${3:padre} e ${4:figli} */",
      "for (${5:i} = 0; ${5:i} < ${2:N}; ${5:i}++)",
      "{",
      "\t/* Creazione della pipe */",
      "\tif (pipe(${1:piped}[${5:i}]) < 0)",
      "\t{",
      "\t\t/* La creazione della pipe ha fallito, stampo un messaggio d'errore ed esco specificando un valore intero d'errore */",
      "\t\tprintf(\"Errore nel piping.\\n\");",
      "\t\texit($6);",
      "\t}",
      "}",
      "",
      "$0"
    ]
  },
  "t-fork single": {
    "prefix": "t-fork",
    "body": [
      "/* Genero un processo ${1:figlio} */",
      "/* Controllo che la fork() abbia successo */",
      "if ((pid = fork()) < 0)",
      "{",
      "\t/* La fork() ha fallito, dunque stampo un messaggio d'errore e ritorno un valore intero d'errore */",
      "\tprintf(\"Errore nella fork.\\n\");",
      "\texit($4);",
      "}",
      "",
      "/* Se pid == 0, allora la fork() ha avuto successo e possiamo eseguire il codice del ${1:figlio} */",
      "if (pid == 0)",
      "{",
      "\t/* Codice del ${1:figlio} */",
      "\tprintf(\"DEBUG-Esecuzione del processo ${1:figlio} %d\\n\", getpid());",
      "\t",
      "\t$0",
      "\t",
      "\texit($5);",
      "}",
      "",
      "/* Codice del ${3:padre} */",
      "",
      ""
    ]
  },
  "t-fork multiple":{
    "prefix":"t-fork",
    "body": [
      "for (${1:n} = 0; ${1:n} < ${2:N}; ${1:n}++)",
      "{",
      "\t/* Genero un processo ${3:figlio} */",
      "\t/* Controllo che la fork() abbia successo */",
      "\tif ((pid = fork()) < 0)",
      "\t{",
      "\t\t/* La fork() ha fallito, dunque stampo un messaggio d'errore e ritorno un valore intero d'errore */",
      "\t\tprintf(\"Errore nella fork.\\n\");",
      "\t\texit($5);",
      "\t}",
      "\t",
      "\t/* Se pid == 0, allora la fork() ha avuto successo e possiamo eseguire il codice del ${3:figlio} */",
      "\tif (pid == 0)",
      "\t{",
      "\t\t/* Codice del ${3:figlio} */",
      "\t\tprintf(\"DEBUG-Esecuzione del processo ${3:figlio} %d\\n\", getpid());",
      "\t\t",
      "\t\t$0",
      "\t\t",
      "\t\texit($6);",
      "\t}",
      "}",
      "/* codice del ${4:padre} */"
    ]
  },
  "t-close: unused file or pipe (single)": {
    "prefix": "t-close (single)",
    "body": [
      "/* Chiudo il ${2:lato pipe} inutilizzato */",
      "close(${1:file});",
      "",
      "$0"
    ]
  },
  "t-close: unused files or pipe (multiple)": {
    "prefix": "t-close (multiple)",
    "body": [
      "/* Chiudo i ${4:lati pipe} non utilizzati */",
      "for (${1:j} = 0; ${1:j} < ${2:N}; ${1:j}++)",
      "{",
      "\tclose($3);",
      "}",
      "",
      ""
    ]
  },
  "t-redirection: on existent file": {
    "prefix": "t-redirection: on existent file",
    "body": [
      "/* Ridirigo ${1:stdout} su ${2:file} */",
      "close(${3:1});",
      "dup(${2:file});",
      "",
      "/* Chiudo ${2:file} che ho appena duplicato, quindi non serve piu' */",
      "close(${2:file});",
      "",
      "$0"
    ]
  },
  "t-redirection: on unexistent file": {
    "prefix": "t-redirection: on unexistent file",
    "body": [
      "/* Ridirigo ${1:stdout} su ${2:file} */",
      "close(${3:1});",
      "int ${4:fd};",
      "if (${4:fd} = open(${5:fd}, ${6:O_RDONLY}) < 0)",
      "{",
      "\tprintf(\"Errore nell'apertura del file\");",
      "\texit($5);",
      "}",
      "close(${4:fd});",
      "",
      "/* Chiudo il lato della pipe che ho appena duplicato */",
      "close(${2:file});",
      "",
      "$0"
    ]
  },
  "t-redirection: stderr on null": {
    "prefix": "t-redirection: stderr on null",
    "body": [
      "/* Per evitare messaggi d'errore ridirigo stderr su /dev/null */",
      "close(2);",
      "open(\"/dev/null\", O_WRONLY);",
      "",
      "$0"
    ]
  },
  "t-wait: son-grandson": {
    "prefix": "t-wait: son-grandson",
    "body": [
      "/* Aspetto il nipote */",
      "int ${1:pidNipote};",
      "ritorno = -1;",
      "if ((${1:pidNipote} = wait(&status)) < 0)",
      "{",
      "\tprintf(\"Errore del figlio in wait.\\n\");",
      "}",
      "if ((status & 0xFF) != 0)",
      "{",
      "\tprintf(\"Processo nipote %d terminato in modo anomalo.\\n\", ${1:pidNipote});",
      "}",
      "else",
      "{",
      "\tritorno = (int)((status >> 8) & 0xFF);",
      "\tprintf(\"Il processo nipote %d ha ritornato %d.\\n\", ${1:pidNipote}, ritorno);",
      "}"
    ]
  },
  "t-wait: father-son (single)": {
    "prefix": "t-wait: father-son (single)",
    "body": [
      "/* Aspetto il figlio */",
      "int ${1:pidFiglio};",
      "if ((${1:pidFiglio} = wait(&status)) < 0)",
      "{",
      "\tprintf(\"Errore del padre in wait.\\n\");",
      "\texit($2);",
      "}",
      "if ((status & 0xFF) != 0)",
      "{",
      "\tprintf(\"Processo figlio %d terminato in modo anomalo.\\n\", ${1:pidFiglio});",
      "}",
      "else",
      "{",
      "\tritorno = (int)((status >> 8) & 0xFF);",
      "\tprintf(\"Il processo figlio %d ha ritornato %d.\\n\", ${1:pidFiglio}, ritorno);",
      "}"
    ]
  },
  "t-wait: father-son (multiple)": {
    "prefix": "t-wait: father-son (multiple)",
    "body": [
      "/* Aspetto i figli */",
      "int ${1:pidFiglio};",
      "for (i = 0; i < ${2:N}; i++)",
      "{",
      "\tif ((${1:pidFiglio} = wait(&status)) < 0)",
      "\t{",
      "\t\tprintf(\"Errore del padre in wait.\\n\");",
      "\t\texit($3);",
      "\t}",
      "\tif ((status & 0xFF) != 0)",
      "\t{",
      "\t\tprintf(\"Processo figlio %d terminato in modo anomalo.\\n\", ${1:pidFiglio});",
      "\t}",
      "\telse",
      "\t{",
      "\t\tritorno = (int)((status >> 8) & 0xFF);",
      "\t\tprintf(\"Il processo figlio %d ha ritornato %d.\\n\", ${1:pidFiglio}, ritorno);",
      "\t}",
      "}"
    ]
  },
  "t-open: open file": {
    "prefix": "t-open: open file",
    "body": [
      "/* Apertura del file */",
      "if ((fd = open(${1:argv[n + 1]}, ${2:O_RDONLY})) < 0)",
      "{",
      "\tprintf(\"Errore nell'apertura del file '%s'.\\n\", ${1:argv[n + 1]});",
      "\texit($3);",
      "}",
      "",
      "$0"
    ]
  },
  "t-exec: exec-fail": {
    "prefix": "t-exec: exec-fail",
    "body": [
      "/* Codice che viene eseguito solo in caso di fallimento della exec */",
      "printf(\"Errore in exec!\\n\");",
      "exit(-1);",
      "$0"
    ]
  },
  "t-create: create file": {
    "prefix": "t-creat: create file",
    "body": [
      "/* Creazione del file ${1:filename} */",
      "if ((fdout = open(${1:filename}, O_CREAT | ${2:O_RDWR} | O_TRUNC, 0644)) < 0)",
      "{",
      "\tprintf(\"Errore nella creazione del file\\n\");",
      "\texit($3);",
      "}",
      "",
      "$0"
    ]
  },
  "t-read: read line": {
    "prefix": "t-read: read line",
    "body": [
      "/* Lettura di ciascun carattere del file linea */",
      "${1:j} = 0;",
      "while (read(fd, &(${2:linea}[${1:j}]), 1) != 0)",
      "{",
      "\t/* Trovato il termine di una linea */",
      "\tif (${2:linea}[${1:j}] == '\\n')",
      "\t{",
      "\t\t$0",
      "\t\t",
      "\t\t${1:j} = 0;",
      "\t}",
      "\telse",
      "\t{",
      "\t\t/* Aggiornamento indice */",
      "\t\t${1:j}++;",
      "\t}",
      "}",
      "",
      ""
    ]
  },
  "t-read: read char": {
    "prefix": "t-read: read char",
    "body": [
      "/* Lettura di ciascun carattere del file */",
      "${1:j} = 0;",
      "while (read(fd, &${2:ch}, 1))",
      "{",
      "\t/* Trovato il termine di una linea */",
      "\tif(${2:ch} == '\\n')",
      "\t{",
      "\t\t$0",
      "\t\t",
      "\t\t${1:j} = 0;",
      "\t}",
      "\telse",
      "\t{",
      "\t\t/* Aggiornamento indice */",
      "\t\t${1:j}++;",
      "\t}",
      "}",
      "",
      ""
    ]
  },
  "t-bubblesort": {
    "prefix": "t-bubblesort",
    "body": [
      "void bubbleSort(${1:int} v[], int dim)",
      "{",
      "\tint i;",
      "\tbool ordinato = false;",
      "\twhile (dim > 1 && !ordinato)",
      "\t{",
      "\t\tordinato = true;",
      "\t\tfor (i = 0; i < dim - 1; i++)",
      "\t\t{",
      "\t\t\tif (v[i].v2 > v[i + 1].v2)",
      "\t\t\t{",
      "\t\t\t\tscambia(&v[i], &v[i+1]);",
      "\t\t\t\tordinato = false;",
      "\t\t\t}",
      "\t\t}",
      "\t\tdim--;",
      "\t}",
      "}",
      ""
    ]
  },
  "t-swap": {
    "prefix": "t-swap",
    "body": [
      "void scambia(${1:int}* a, ${1:int}* b)",
      "{",
      "\t${1:int} tmp = *a;",
      "\t*a = *b;",
      "\t*b = tmp;",
      "}",
      ""
    ]
  },
  "t-number: positive number": {
    "prefix": "t-number: positive number",
    "description": "t-number: positive number",
    "body": [
      "/* Controllo che il numero sia un intero positivo */",
      "for (${1:i} = 0; ${1:i} < strlen(${2:argv[argc - 1]}); ${1:i}++)",
      "{",
      "\t/* Se anche solo un carattere non Ã¨ un numero intero, allora sono incorso in un errore */",
      "\tif (!isdigit(${2:argv[argc - 1]}[${1:i}]))",
      "\t{",
      "\t\tprintf(\"Errore: il parametro %s non e' un numero intero positivo.\\n\", ${2:argv[argc - 1]});",
      "\t\texit($3);",
      "\t}",
      "}",
      "",
      "$0"
    ]
  },
  "t-random: random generator": {
    "prefix": "t-random: random generator",
    "description": "t-random: random generator",
    "body": [
      "#include <time.h>",
      "",
      "int mia_random(int n)",
      "{",
      "\tint casuale;",
      "\tcasuale = rand() % n;",
      "\treturn casuale;",
      "}",
      "${1:/* Ricordati di mettere srand(time(NULL)); all'inizio del main */}"
    ]
  },
  "t-write": {
    "prefix": "t-write",
    "description": "t-write",
    "body": [
      "if (write($1, $2, $3) == 0)",
      "{",
      "\tprintf(\"Errore: fallita la write $4.\\n\");",
      "\texit($5);",
      "}",
      "",
      "$0"
    ]
  },
  "t-read": {
    "prefix": "t-read",
    "description": "t-read",
    "body": [
      "if (read($1, $2, $3) == 0)",
      "{",
      "\tprintf(\"Errore: fallita la read $4.\\n\");",
      "\texit($5);",
      "}",
      "",
      "$0"
    ]
  },
  "t-signal":{
    "prefix":"t-signal",
    "description": "signal",
    "body":[
      "/* Installo l'handler $2 per gestire il segnale $1 */",
      "signal($1, $2);",
      "$0"
    ] 
  },
  "t-handler":{
    "prefix":"t-handler",
    "description":"handler",
    "body":[
      "/* Definisco un handler */",
      "void handler(int signo)",
      "{",
      "\tprintf(\"DEBUG-Il processo %d ha ricevuto il segnale %d.\\n\", getpid(), signo);",
      "${1:exit(signo);}",
      "}",
      "",
      "$0"
    ]
  }
}